#from cgitb import reset
import re
import os
import traceback
import time
import datetime
import string
import random
import requests

# bot_Rublev_By_xeLa.py


from colorama import Fore

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
#from asgiref.sync import sync_to_async
from bs4 import BeautifulSoup as BS
from datetime import datetime

from threading import Thread as thread

from time import sleep as wait


def pairs(obj):
  return obj.items()

def ipairs(obj):
  return enumerate(obj)

DEBUG = True
#—Ç–æ–∫–µ–Ω –∑–æ–Ω—Ç–∏–∫ —Ç–µ—Å—Ç2
TOKEN = ""

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

newdate = datetime.now()
newdate = newdate.strftime("%d.%m.%Y")


buttons = {
  "menu": ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')),

  "permutation": [
    ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton('USDT'), KeyboardButton('EUR'), KeyboardButton('TL')).add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')),
  ],

}

def stop():
  while True:
    pass

def debug(string):
  log(string, "debug")

def pairs(obj):
  return obj.items()

def ipairs(obj):
  return enumerate(obj)

def log(text, type_log="info"):
  if type_log == "info":
    type_color = Fore.LIGHTBLUE_EX
  elif type_log == "success":
    type_color = Fore.LIGHTGREEN_EX
  elif type_log == "error":
    type_color = Fore.LIGHTRED_EX
  elif type_log == "warning":
    type_color = Fore.YELLOW
  elif type_log == "debug":
    type_color = Fore.LIGHTCYAN_EX

  if type_log == "debug" and not DEBUG:
    return
  if type_log == "warning" and not DEBUG:
    return

  print(f"{Fore.CYAN}{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Fore.WHITE} | {type_color}{type_log.title()}{Fore.WHITE} | {Fore.LIGHTBLACK_EX}{text}")

  

# –ë–æ—Ç

def main():
  dp.register_message_handler(FSM.Permutation.Cancel, lambda msg: msg.text.lower() == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', state=FSM.Permutation)
  dp.register_message_handler(FSM.Permutation.getAmount, state=FSM.Permutation.amount)
  dp.register_message_handler(FSM.Permutation.getTypeCurrency, state=FSM.Permutation.type_currency)
  dp.register_message_handler(FSM.Permutation.getContacts, state=FSM.Permutation.contacts)

  dp.register_message_handler(FSM.Exchange.Cancel, lambda msg: msg.text.lower() == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', state=FSM.Exchange)
  dp.register_message_handler(FSM.Exchange.getTypeExchange, state=FSM.Exchange.type_exchange)
  dp.register_message_handler(FSM.Exchange.getAmount, state=FSM.Exchange.amount)
  dp.register_message_handler(FSM.Exchange.getTypeCurrency, state=FSM.Exchange.type_currency)
  dp.register_message_handler(FSM.Exchange.getCity, state=FSM.Exchange.city)
  dp.register_message_handler(FSM.Exchange.getContacts, state=FSM.Exchange.contacts)

  executor.start_polling(dp, skip_updates=True)

@dp.message_handler(commands=["start"])
async def main_command(msg: types.Message):
  command = msg.get_command()

  if command == "/start":
    text = "\
     \nüòé  –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –≤ –¢—É—Ä—Ü–∏–∏.\
     \nü§ë  –õ—é–±—ã–µ —Å—É–º–º—ã –¥–µ–Ω—å–≥–∏ –≤ –Ω–∞–ª–∏—á–∏–µ.\
     \nüè¶  –û–±–º–µ–Ω –≤ –æ—Ñ–∏—Å–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞\
     \nüëå  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫–Ω–æ—Ç –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏\
     \nüá∑üá∫  –í—ã–≤–µ–¥–µ–º —Ä—É–±–ª–∏ –∏–∑ –†–æ—Å—Å–∏–∏ –≤—ã–¥–∞–µ–º $, –ï–≤—Ä–æ, –¢L\
     \nüë®‚Äçüíª  –ü–µ—Ä–µ–≤–µ–¥–µ–º –ª—é–±—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã –º–∏—Ä–∞, –≤ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É\
     \nüè°  –ü–æ–∫—É–ø–∞–π—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –¢—É—Ä—Ü–∏–∏? –ú—ã –≤—ã–≤–µ–¥–µ–º –ª—é–±—É—é —Å—É–º–º—É!\
     \nüáπüá∑  –ù–∞—à –æ—Ñ–∏—Å –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–∞—Ö–º—É—Ç–ª–∞—Ä–∞\
    "
    await bot.send_photo(chat_id=msg.from_user['id'], photo='https://i.imgur.com/4Yql7s7.jpg')
    await msg.answer(text, reply_markup=buttons['menu'])

@dp.message_handler(state=None)
async def main_message(msg: types.Message):
  if msg.text == "–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":

    textresult = {}

    # –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è –õ–ò–†–´ 
    url = 'https://www.bybit.com/fiat/trade/otc/?actionType=1&token=USDT&fiat=RUB&paymentMethod=64'

    headers= {
        "content-type": "application/json",
        "x-trace-id": "4c3d6fce-a2d8-421e-9d5b-e0c12bd2c7c0",
        "x-ui-request-trace": "4c3d6fce-a2d8-421e-9d5b-e0c12bd2c7c0"
    }

    i = 0
    integer = 0

    for v in range(1):
      result = requests.post(url, headers=headers, json={"proMerchantAds":False,"page":v + 1,"rows":10,"payTypes":["TinkoffNew"],"countries":[],"publisherType":None,"asset":"USDT","fiat":"RUB","tradeType":"BUY"}).json()

      for key, item in ipairs(result['data']):
        print(item['adv']['price'], item['adv']['maxSingleTransAmount'], item['adv']['minSingleTransAmount'])
        i += 1
        integer += float(item['adv']['price'])

    print("")

    textresult['tinkoff'] = float(integer) / i

    #await msg.answer(text, reply_markup=buttons['menu'])

    # –ó–∞–ø—Ä–æ—Å –≤—Ç–æ—Ä–æ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è –õ–ò–†–´ 

    url = 'https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search'
 
    headers= {
        "content-type": "application/json",
        "x-trace-id": "4c3d6fce-a2d8-421e-9d5b-e0c12bd2c7c0",
        "x-ui-request-trace": "4c3d6fce-a2d8-421e-9d5b-e0c12bd2c7c0"
    }

    i = 0
    integer = 0

    for v in range(1):
      result = requests.post(url,headers=headers,json={"proMerchantAds":False,"page":1,"rows":10,"payTypes":[],"countries":[],"publisherType":None,"asset":"USDT","fiat":"TRY","tradeType":"SELL"}).json()

      for key, item in ipairs(result['data']):
        print(item['adv']['price'], item['adv']['maxSingleTransAmount'], item['adv']['minSingleTransAmount'])
        i += 1
        integer += float(item['adv']['price'])

    print("")

    textresult['zirat'] = float(integer) / i

    textresult['tinkoff'] = round(textresult['tinkoff'], 4)
    textresult['zirat'] = round(textresult['zirat'], 4)
    textresult['eur'] = float(textresult['tinkoff']) / float(textresult['zirat'])
    textresult['eur'] = round(textresult['eur'] + ((textresult['eur'] * 4) / 100), 4)
    textresult['dollar'] = round(float(textresult['tinkoff']) + (1.3 % float(textresult['tinkoff'])), 4)
    textresult['dollar2'] = round(float(textresult['tinkoff']) + ( (7 % float(textresult['tinkoff'])) * 1.08), 4)

    result = float()
    #–ü–ê–†–°–ò–ú –ë–ò–ù–ê–ù–° –ü–ï–†–í–´–ï 2 –°–¢–†–ê–ù–ò–¶–´ –ò–õ–ò 20 –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô –ü–û usdt –∑–∞ —Ä—É–±–ª—å —Ç–∏–Ω—å–∫–æ—Ñ / –ù–ê 20 –ü–û–õ–£–ß–ê–ï–ú –°–†–ï–î–ù–ò–ô –ö–£–†–° –û–ö–†–£–ì–õ–Ø–ï–ú
    # –í –ë–û–õ–¨–®–£–Æ –°–¢–û–†–û–ù–£ (https://p2p.binance.com/ru/trade/TinkoffNew/USDT?fiat=RUB) –î–ê–õ–ï–ï –ü–†–ò–ë–ê–í–õ–Ø–ï–ú –ù–ê–®–ò 1,3 –ü–†–û–¶–ï–ù–¢–ê
    # –ò –ü–û–õ–£–ß–ê–ï–ú –ö–£–†–° –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê –û–ö–†–£–ì–õ–Ø–ô –¶–ò–§–†–´ –î–û 4 –ó–ù–ê–ö–û–í –ü–û–°–õ–ï –ó–ê–ü–Ø–¢–û–ô
    #text = f"–¢–∏–Ω—å–∫–æ—Ñ—Ñ: {textresult['tinkoff']} –ó–∏—Ä–∞—Ç: {textresult['zirat']}"

    text = f"\
     \nüìå–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–π—á–∞—Å:\n\
     \n–û—Ç–¥–∞–µ—Ç–µ/–ü–æ–ª—É—á–∞–µ—Ç–µ = –ö—É—Ä—Å\n\
     \nüíµ ‚ÇΩüá∑üá∫ / $üá∫üá∏    = {textresult['dollar']} ‚ÇΩ\
     \nüí∑ ‚ÇΩüá∑üá∫ / ‚Ç∫üáπüá∑    = {textresult['eur']} ‚ÇΩ\
     \nüí∂ ‚ÇΩüá∑üá∫ / ‚Ç¨üá™üá∫    = {textresult['dollar2']} ‚ÇΩ\
     \n\
     \nüí∞ –¢–∏–Ω—å–∫–æ—Ñ/–°–±–µ—Ä–±–∞–Ω–∫, –¥–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –æ—Ñ–∏—Å–µ, –ª–∏–±–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–π –æ–±–º–µ–Ω. –û—Ç 10000 –ª–∏—Ä –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ê–ª–∞–Ω–∏–∏.\n\
     \nüöó –í—ã–µ–∑–¥ –≤ –ú–∞—Ö–º—É—Ç–ª–∞—Ä, –ê–ª–∞–Ω–∏—è, –ê–≤—Å–∞–ª–ª–∞—Ä\n\
     \nüè¶ –ù–∞—à –æ—Ñ–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–∞—Ö–º—É—Ç–ª–∞—Ä–∞\
    "

    await msg.answer(text, reply_markup=buttons['menu'])

  

  elif msg.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –≤ –¢—É—Ä—Ü–∏–∏ üáπüá∑":
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ –æ–±–º–µ–Ω–∞", reply_markup=buttons['exchange'][0])
    await FSM.Exchange.type_exchange.set()
    await dp.storage.wait_closed()
  elif msg.text == "–ú–µ–Ω—è–µ–º RUB –Ω–∞ USD, TL, EURO üí∞":
    await msg.answer("‚§¥Ô∏è - –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –∫–æ—Ç–æ—Ä—É—é –í—ã –æ—Ç–¥–∞–µ—Ç–µ:", reply_markup=buttons['cancel'])
    await FSM.Permutation.amount.set()
    await dp.storage.wait_closed()
  elif msg.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò":

    await msg.answer("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞—à–∏–º —Å–∞–ø–ø–æ—Ä—Ç–∞–º üí≠\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá", reply_markup=support_button)
       
  elif msg.text == "–ù–∞—à–∏ –æ—Ñ–∏—Å—ã üè¢":
    await msg.answer("üáπüá∑ –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ú–∞—Ö–º—É—Ç–ª–∞—Ä\
    \n\
                     \n‚è± –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Å 10:00 –¥–æ 17:00\
                     \n‚è± –°–ë –∏ –í–° - –ø–æ –∑–∞–ø—Ä–æ—Å—É\
    \n\
                     \n–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ : @xeLabtc\
    \n\
 ")
  else:
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é.")

@dp.callback_query_handler(state=None)
async def main_callback(call: types.CallbackQuery):
  pass

class FSM:
  class Exchange(StatesGroup):
    type_exchange = State()
    amount = State()
    type_currency = State()
    city = State()
    contacts = State()

    async def Cancel(msg: types.Message, state):
      text = "\
        \nüòé  –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –≤ –¢—É—Ä—Ü–∏–∏.\
        \nü§ë  –õ—é–±—ã–µ —Å—É–º–º—ã –¥–µ–Ω—å–≥–∏ –≤ –Ω–∞–ª–∏—á–∏–µ.\
        \nüè¶  –û–±–º–µ–Ω –≤ –æ—Ñ–∏—Å–µ\
        \nüëå  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫–Ω–æ—Ç –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏\
        \nüá∑üá∫  –í—ã–≤–µ–¥–µ–º —Ä—É–±–ª–∏ –∏–∑ –†–æ—Å—Å–∏–∏ –≤—ã–¥–∞–µ–º $, –ï–≤—Ä–æ, –¢L\
        \nüë®‚Äçüíª  –ü–µ—Ä–µ–≤–µ–¥–µ–º –ª—é–±—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã –º–∏—Ä–∞, –≤ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É\
        \nüè°  –ü–æ–∫—É–ø–∞–π—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –¢—É—Ä—Ü–∏–∏? –ú—ã –≤—ã–≤–µ–¥–µ–º –ª—é–±—É—é —Å—É–º–º—É!\
        \nüáπüá∑  –ù–∞—à –æ—Ñ–∏—Å –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–∞—Ö–º—É—Ç–ª–∞—Ä–∞\
      "
      await bot.send_photo(chat_id=msg.from_user['id'], photo='https://i.imgur.com/4Yql7s7.jpg')
      await msg.answer(text, reply_markup=buttons['menu'])
      await state.finish()
      await dp.storage.close()

    async def getTypeExchange(msg: types.Message, state):
      if "–û—Ç–¥–∞–µ—Ç–µ" in msg.text or "–ü–æ–ª—É—á–∞–µ—Ç–µ" in msg.text:
        async with state.proxy() as data:
          if "–ö—É–ø–∏—Ç—å" in msg.text:
            data['type_exchange_action'] = "–ø—Ä–æ–¥–∞–∂–∞"
          else:
            data['type_exchange_action'] = "–ø—Ä–æ–¥–∞–∂–∞"

          data['type_exchange'] = msg.text.replace("–û—Ç–¥–∞–µ—Ç–µ", "").replace("–ü–æ–∫—É–ø–∞–µ—Ç–µ", "").replace(" ", "")

        await msg.answer("1Ô∏è‚É£  - –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=buttons['cancel'])
        await FSM.Exchange.next()
        await dp.storage.wait_closed()

    async def getAmount(msg: types.Message, state):
      if msg.text.isdigit():
        async with state.proxy() as data:
          data['amount'] = msg.text

        await msg.answer("2Ô∏è‚É£ - –ü–æ–ª—É—á–∞–µ—Ç–µ:", reply_markup=buttons['exchange'][1])
        await FSM.Exchange.next()
        await dp.storage.wait_closed()
      else:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ.")

    async def getTypeCurrency(msg: types.Message, state):
      async with state.proxy() as data:
        data['type_currency'] = msg.text

      await msg.answer("3Ô∏è‚É£ - –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –æ—Ñ–∏—Å:", reply_markup=buttons['exchange'][2])
      await FSM.Exchange.next()
      await dp.storage.wait_closed()

    async def getCity(msg: types.Message, state):
      async with state.proxy() as data:
        data['city'] = msg.text

      await msg.answer("üì≤ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏:", reply_markup=buttons['cancel'])
      await FSM.Exchange.next()
      await dp.storage.wait_closed()

    async def getContacts(msg: types.Message, state):
      async with state.proxy() as data:
        data['contacts'] = msg.text

      async with state.proxy() as data:
        result_data = data

      tg_nick = "None"

      if msg.from_user['username']:
        tg_nick = "@" + msg.from_user['username']

      text = f"üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç:\
                       \n\
                       \n–û—Ç–¥–∞–µ—Ç–µ {result_data['amount']} {result_data['type_exchange']}\
                       \n{result_data['type_currency']}\
                       \n\
                       \nüìØ –í –≥–æ—Ä–æ–¥–µ: {result_data['city']}\
                       \n‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {result_data['contacts']}\
                       \nüë®üèª‚Äçüíª Telegram: {tg_nick}\
                       \n\
                       \n‚úÖ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞. –ù–∞—à –º–µ–Ω–µ–Ω–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è\
                       \n\
                       \n‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ –∑–∞—è–≤–∫—É"
                      
                       
                     


      await msg.answer("\n" + text, reply_markup=buttons['menu'])

      sendMessage("-1001510147149", text)

      await state.finish()
      await dp.storage.close()

  class Permutation(StatesGroup):
    amount = State()
    type_currency = State()
    contacts = State()

    async def Cancel(msg: types.Message, state):
      text = "\
        \nüòé  –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –≤ –¢—É—Ä—Ü–∏–∏.\
        \nü§ë  –õ—é–±—ã–µ —Å—É–º–º—ã –¥–µ–Ω—å–≥–∏ –≤ –Ω–∞–ª–∏—á–∏–µ.\
        \nüè¶  –û–±–º–µ–Ω –≤ –æ—Ñ–∏—Å–µ\
        \nüëå  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∫–Ω–æ—Ç –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏\
        \nüá∑üá∫  –í—ã–≤–µ–¥–µ–º —Ä—É–±–ª–∏ –∏–∑ –†–æ—Å—Å–∏–∏ –≤—ã–¥–∞–µ–º $, –ï–≤—Ä–æ, –¢L\
        \nüë®‚Äçüíª  –ü–µ—Ä–µ–≤–µ–¥–µ–º –ª—é–±—É—é –≤–∞–ª—é—Ç—É –∏–∑ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã –º–∏—Ä–∞, –≤ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É\
        \nüè°  –ü–æ–∫—É–ø–∞–π—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –¢—É—Ä—Ü–∏–∏? –ú—ã –≤—ã–≤–µ–¥–µ–º –ª—é–±—É—é —Å—É–º–º—É!\
        \nüáπüá∑  –ù–∞—à –æ—Ñ–∏—Å –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–∞—Ö–º—É—Ç–ª–∞—Ä–∞\
      "
      await bot.send_photo(chat_id=msg.from_user['id'], photo='https://i.imgur.com/4Yql7s7.jpg')
      await msg.answer(text, reply_markup=buttons['menu'])
      await state.finish()
      await dp.storage.close()

    async def getAmount(msg: types.Message, state):
      if msg.text.isdigit():
        async with state.proxy() as data:
          data['amount'] = msg.text

        await msg.answer("‚§µÔ∏è - –í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏:", reply_markup=buttons['permutation'][0])
        await FSM.Permutation.next()
        await dp.storage.wait_closed()
      else:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ.")

    async def getTypeCurrency(msg: types.Message, state):
      async with state.proxy() as data:
        data['type_currency'] = msg.text

      await msg.answer("üì≤ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏:", reply_markup=buttons['cancel'])
      await FSM.Permutation.next()
      await dp.storage.wait_closed()

    async def getContacts(msg: types.Message, state):
      async with state.proxy() as data:
        data['contacts'] = msg.text

      async with state.proxy() as data:
        result_data = data

      tg_nick = "N/A"

      if msg.from_user['username']:
        tg_nick = "@" + msg.from_user['username']

      text = f"üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É –≤–∞–ª—é—Ç—ã –∏–∑ –†–§: {result_data['amount']} RUB\
                       \n‚¨ÜÔ∏è –û–ø–ª–∞—Ç–∞ - {result_data['type_currency']}\
                       \n\
                       \n‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: {result_data['contacts']}\
                       \nüë®üèª‚Äçüíª Telegram: {tg_nick}\
                       \n\
                       \n‚úÖ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞. –ù–∞—à –º–µ–Ω–µ–Ω–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è\
                       \n\
                       \n‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ –∑–∞—è–≤–∫—É"

      await msg.answer("\n" + text, reply_markup=buttons['menu'])

      sendMessage("-1001510147149", text)
      await state.finish()
      await dp.storage.close()
      

    

# –§—É–Ω–∫—Ü–∏–∏

def sendMessage(id, text):
  global TOKEN

  requests.get(f"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={id}&text={text}")
  

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

main()
